#include <WiFi.h>
#include <HTTPClient.h>
#include "SPIFFS.h"
#include "FS.h"
#include <Arduino_JSON.h>
#include <pgmspace.h>
#include <Minitel1B_Hard.h>  // Voir https://github.com/eserandour/Minitel1B_Hard
Minitel minitel(Serial1);    // Le deuxième port série matériel de l'ATMega 1284P (RXD1 TXD1).

unsigned long touche;
String userInput = "";
int userInputNeeded = 0;
const char* ssid = "";
const char* password = "";
String currentService = "MIRE";
JSONVar myObject = {};

void initConfig() {
  minitel.pageMode();
 // on cherche les codes wifi dans le fichier config.txt
  JSONVar config = readConfig();
  myObject["currentLine"] = (int)0;
  char json[] = "[[14, 12, 27],[14, 15, 27],[14, 16, 27]]";
  JSONVar coords = JSON.parse(json);
  myObject["coords"] = coords;
  char jsond[] = "[\"\", \"\", \"\"]";
  JSONVar input = JSON.parse(jsond);
  myObject["wifiMessage"]="";
  if(config.length()>0){
    input=config;
    ssid = (const char*)config[1];
    password = (const char*)config[2];
    String wifistatus = wifiConnect();
    Serial.println("wifireturn");
    Serial.println(wifistatus);
    minitel.moveCursorXY(2, 19);
    minitel.attributs(CARACTERE_BLANC);
    minitel.print("Connecté");
    minitel.print(wifistatus);
    myObject["wifiMessage"]= wifistatus;

  }
  myObject["input"] = input;
  
  Serial.println(myObject);
  //
}
void afficheConfig(String vdt) {
  minitel.noCursor();
  drawScreen(vdt, 0, 0);
  minitel.echo(false);
  minitel.textMode();
  afficheConfigChampsSaisie();
  myObject["currentLine"] = 0;
  minitel.echo(true);
}

void afficheConfigChampsSaisie() {
  JSONVar coords = myObject["coords"];
  JSONVar input = myObject["input"];
  int nc = coords.length();
  for (int i = 0; i < nc; i++) {
    champVide(coords[i][0], coords[i][1], coords[i][2]);
    minitel.print((const char*)input[i]);
  }
  minitel.moveCursorXY(coords[0][0], coords[0][1]);
  minitel.cursor();
  minitel.echo(true);
}
JSONVar readConfig() {
  File file = SPIFFS.open("/config.txt", "r");
  Serial.println(file);
  JSONVar theresult = {};
  if (!file) {
    Serial.println("Failed to open file for reading");
    return theresult;
  } else {
    int s = file.size();
    char content[s + 1] = {};
    int i = 0;
    while (file.available()) {
      char c = file.read();
      content[i] = c;
      i++;
    }
    Serial.println(content);
    Serial.println("");
    String myString = String(content);
    Serial.println(myString);
    theresult = JSON.parse(content);
    Serial.println(theresult);
    return theresult;
  }
}
void gereTouches(){

}

void gereTouchesConfig() {
  touche = minitel.getKeyCode();
  if ((touche != 0)
      && (touche != CONNEXION_FIN)
      && (touche != SOMMAIRE)
      && (touche != ANNULATION)
      && (touche != RETOUR)
      && (touche != REPETITION) && (touche != GUIDE) && (touche != CORRECTION) && (touche != SUITE) && (touche != ENVOI)) {
    userInput += char(touche);
    myObject["input"][myObject["currentLine"]] = userInput;
    Serial.println(myObject["input"]);
  }
  int currentLine;
  switch (touche) {
    case SUITE:
      {
        int currentLine = myObject["currentLine"];
        if (currentLine < 2) {
          Serial.println(currentLine);
          currentLine += 1;
          JSONVar nextSaisie = myObject["input"][currentLine];
          userInput = (const char*)nextSaisie;
          int offsetX = strlen(nextSaisie);
          myObject["currentLine"] = currentLine;
          JSONVar coords = myObject["coords"][currentLine];
          int nx = coords[0];
          int ny = coords[1];
          minitel.moveCursorXY(nx + offsetX, ny);
        }
      }
      break;
    case RETOUR:
      {
        int currentLine = myObject["currentLine"];
        Serial.println(currentLine);
        if (currentLine > 0) {
          userInput = "";
          currentLine -= 1;
          JSONVar previousSaisie = myObject["input"][currentLine];
          userInput = (const char*)previousSaisie;
          int offsetX = strlen(previousSaisie);
          myObject["currentLine"] = currentLine;
          JSONVar coords = myObject["coords"][currentLine];
          int nx = coords[0];
          int ny = coords[1];
          minitel.moveCursorXY(nx + offsetX, ny);
        }
      }
      break;
    case ANNULATION:
      {
        int currentLine = myObject["currentLine"];
        JSONVar coords = myObject["coords"][currentLine];
        myObject["input"][currentLine] = "";
        champVide(myObject["coords"][currentLine][0], myObject["coords"][currentLine][1], myObject["coords"][currentLine][2]);
        Serial.println(myObject["input"]);
      }
      break;
    case CORRECTION:
      {
        int nbCaracteres = userInput.length();
        Serial.println(nbCaracteres);
        if (nbCaracteres > 0) {
          minitel.moveCursorLeft(1);
          minitel.attributs(CARACTERE_BLEU);
          minitel.print(".");
          minitel.attributs(CARACTERE_BLANC);
          minitel.moveCursorLeft(1);
          userInput = userInput.substring(0, userInput.length() - 1);
          //formulaireConfigData[myObject["currentLine"]] = userInput;
          myObject["input"][myObject["currentLine"]] = userInput;
        }
      }
      break;
    case ENVOI:
      {
        Serial.println(myObject);
        File file = SPIFFS.open("/config.txt", "w");
        if (!file) {
          // File not found | le fichier de test n'existe pas
          Serial.println("Failed to open test file");
          return;
        } else {
          file.print(myObject["input"]);
          file.close();
        }
      }
      break;
      case GUIDE:
      String vdt = "0x14, 0x0c, 0x1f, 0x41, 0x45, 0x0e, 0x1b, 0x46, 0x58, 0x1b, 0x56, 0x1b, 0x40, 0x23, 0x1b, 0x50, 0x1b, 0x46, 0x30, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1b, 0x47, 0x50, 0x40, 0x09, 0x30, 0x50, 0x09, 0x30, 0x50, 0x40, 0x09, 0x30, 0x54, 0x1f, 0x42, 0x43, 0x0e, 0x1b, 0x46, 0x40, 0x1b, 0x56, 0x1b, 0x40, 0x21, 0x20, 0x20, 0x20, 0x1b, 0x50, 0x1b, 0x46, 0x54, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x12, 0x42, 0x1b, 0x50, 0x1b, 0x47, 0x34, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x4a, 0x1b, 0x50, 0x1b, 0x47, 0x34, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x12, 0x42, 0x1b, 0x50, 0x1b, 0x47, 0x34, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x1f, 0x43, 0x42, 0x0e, 0x1b, 0x46, 0x48, 0x1b, 0x56, 0x20, 0x20, 0x20, 0x20, 0x1b, 0x45, 0x40, 0x1b, 0x55, 0x1b, 0x46, 0x21, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1b, 0x50, 0x1b, 0x47, 0x12, 0x4b, 0x22, 0x1f, 0x44, 0x42, 0x0e, 0x1b, 0x56, 0x20, 0x12, 0x43, 0x1b, 0x45, 0x58, 0x1b, 0x55, 0x1b, 0x40, 0x40, 0x34, 0x1f, 0x45, 0x42, 0x0e, 0x1b, 0x56, 0x20, 0x12, 0x42, 0x1b, 0x55, 0x1b, 0x46, 0x21, 0x1b, 0x40, 0x58, 0x1b, 0x50, 0x20, 0x1b, 0x45, 0x4a, 0x1f, 0x46, 0x42, 0x0e, 0x1b, 0x56, 0x1b, 0x40, 0x34, 0x20, 0x20, 0x1b, 0x55, 0x4a, 0x1b, 0x50, 0x20, 0x1b, 0x45, 0x40, 0x1b, 0x55, 0x1b, 0x40, 0x21, 0x1b, 0x50, 0x1b, 0x45, 0x54, 0x1f, 0x47, 0x43, 0x0e, 0x1b, 0x56, 0x1b, 0x40, 0x54, 0x20, 0x1b, 0x55, 0x4a, 0x1b, 0x50, 0x1b, 0x45, 0x58, 0x1b, 0x55, 0x20, 0x20, 0x20, 0x1b, 0x40, 0x22, 0x1b, 0x50, 0x1b, 0x45, 0x30, 0x1f, 0x48, 0x44, 0x0e, 0x1b, 0x46, 0x22, 0x1b, 0x55, 0x1b, 0x40, 0x30, 0x20, 0x20, 0x20, 0x20, 0x58, 0x1f, 0x49, 0x46, 0x0e, 0x1b, 0x55, 0x1b, 0x40, 0x54, 0x20, 0x40, 0x1b, 0x50, 0x1b, 0x45, 0x21, 0x1f, 0x4a, 0x47, 0x0e, 0x1b, 0x45, 0x22, 0x1f, 0x44, 0x4e, 0x1b, 0x46, 0x4c, 0x45, 0x20, 0x47, 0x55, 0x49, 0x44, 0x45, 0x20, 0x44, 0x45, 0x53, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x1f, 0x46, 0x4e, 0x1b, 0x45, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x7a, 0x20, 0x6c, 0x27, 0x65, 0x78, 0x70, 0x19, 0x42, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x64, 0x75, 0x20, 0x1f, 0x47, 0x4e, 0x1b, 0x45, 0x6d, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x6c, 0x20, 0x76, 0x69, 0x61, 0x20, 0x63, 0x65, 0x73, 0x20, 0x71, 0x75, 0x65, 0x6c, 0x71, 0x75, 0x65, 0x73, 0x1f, 0x48, 0x4e, 0x1b, 0x45, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x1f, 0x49, 0x4e, 0x1b, 0x45, 0x61, 0x6e, 0x6e, 0x19, 0x42, 0x65, 0x65, 0x73, 0x20, 0x38, 0x30, 0x2e, 0x1f, 0x4a, 0x41, 0x1b, 0x44, 0x60, 0x12, 0x67, 0x1f, 0x57, 0x41, 0x1b, 0x44, 0x60, 0x12, 0x69, 0x1f, 0x58, 0x41, 0x1b, 0x45, 0x54, 0x61, 0x70, 0x65, 0x7a, 0x20, 0x75, 0x6e, 0x20, 0x6e, 0x19, 0x30, 0x20, 0x6f, 0x75, 0x20, 0x73, 0x6f, 0x6e, 0x20, 0x6e, 0x6f, 0x6d, 0x20, 0x2e, 0x12, 0x48, 0x20, 0x1b, 0x47, 0x1b, 0x5d, 0x20, 0x45, 0x4e, 0x56, 0x4f, 0x49, 0x20, 0x1f, 0x4b, 0x43, 0x31, 0x20, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x49, 0x52, 0x45, 0x1f, 0x4c, 0x43, 0x32, 0x20, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x1f, 0x4d, 0x43, 0x33, 0x20, 0x43, 0x4f, 0x55, 0x50, 0x4c, 0x45, 0x53, 0x50, 0x41, 0x52, 0x46, 0x41, 0x49, 0x54, 0x53, 0x1f, 0x4e, 0x43, 0x34, 0x20, 0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45, 0x1f, 0x4f, 0x43, 0x35, 0x20, 0x47, 0x41, 0x4c, 0x45, 0x52, 0x49, 0x45, 0x1f, 0x50, 0x43, 0x36, 0x20, 0x4c, 0x45, 0x4d, 0x4f, 0x4e, 0x44, 0x45, 0x1f, 0x51, 0x43, 0x37, 0x20, 0x4d, 0x45, 0x54, 0x45, 0x4f, 0x1f, 0x52, 0x43, 0x38, 0x20, 0x4e, 0x41, 0x42, 0x41, 0x5a, 0x54, 0x41, 0x47, 0x1f, 0x53, 0x43, 0x39, 0x20, 0x50, 0x45, 0x4e, 0x44, 0x55, 0x1f, 0x54, 0x42, 0x31, 0x30, 0x20, 0x50, 0x4f, 0x4e, 0x47, 0x1f, 0x55, 0x42, 0x31, 0x31, 0x20, 0x50, 0x50, 0x50, 0x20, 0x28, 0x70, 0x6c, 0x75, 0x69, 0x65, 0x20, 0x70, 0x61, 0x73, 0x20, 0x70, 0x6c, 0x75, 0x69, 0x65, 0x20, 0x3f, 0x29, 0x1f, 0x56, 0x42, 0x31, 0x32, 0x20, 0x54, 0x41, 0x52, 0x4f, 0x54";
  }
}

void setup() {
  Serial.begin(115200);
  SPIFFS.begin(true);
  initConfig();
  String vdt = "0x14, 0x0c, 0x1f, 0x41, 0x45, 0x0e, 0x1b, 0x46, 0x58, 0x1b, 0x56, 0x1b, 0x40, 0x23, 0x1b, 0x50, 0x1b, 0x46, 0x30, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1b, 0x47, 0x50, 0x40, 0x09, 0x30, 0x50, 0x09, 0x30, 0x50, 0x40, 0x09, 0x30, 0x54, 0x1f, 0x42, 0x43, 0x0e, 0x1b, 0x46, 0x40, 0x1b, 0x56, 0x1b, 0x40, 0x21, 0x20, 0x20, 0x20, 0x1b, 0x50, 0x1b, 0x46, 0x54, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x12, 0x42, 0x1b, 0x50, 0x1b, 0x47, 0x34, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x4a, 0x1b, 0x50, 0x1b, 0x47, 0x34, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x12, 0x42, 0x1b, 0x50, 0x1b, 0x47, 0x34, 0x1b, 0x57, 0x1b, 0x40, 0x4a, 0x1f, 0x43, 0x42, 0x0e, 0x1b, 0x46, 0x48, 0x1b, 0x56, 0x20, 0x20, 0x20, 0x20, 0x1b, 0x45, 0x40, 0x1b, 0x55, 0x1b, 0x46, 0x21, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1b, 0x50, 0x1b, 0x47, 0x12, 0x4b, 0x22, 0x1f, 0x44, 0x42, 0x0e, 0x1b, 0x56, 0x20, 0x12, 0x43, 0x1b, 0x45, 0x58, 0x1b, 0x55, 0x1b, 0x40, 0x40, 0x34, 0x1f, 0x45, 0x42, 0x0e, 0x1b, 0x56, 0x20, 0x12, 0x42, 0x1b, 0x55, 0x1b, 0x46, 0x21, 0x1b, 0x40, 0x58, 0x1b, 0x50, 0x20, 0x1b, 0x45, 0x4a, 0x1f, 0x46, 0x42, 0x0e, 0x1b, 0x56, 0x1b, 0x40, 0x34, 0x20, 0x20, 0x1b, 0x55, 0x4a, 0x1b, 0x50, 0x20, 0x1b, 0x45, 0x40, 0x1b, 0x55, 0x1b, 0x40, 0x21, 0x1b, 0x50, 0x1b, 0x45, 0x54, 0x1f, 0x47, 0x43, 0x0e, 0x1b, 0x56, 0x1b, 0x40, 0x54, 0x20, 0x1b, 0x55, 0x4a, 0x1b, 0x50, 0x1b, 0x45, 0x58, 0x1b, 0x55, 0x20, 0x20, 0x20, 0x1b, 0x40, 0x22, 0x1b, 0x50, 0x1b, 0x45, 0x30, 0x1f, 0x48, 0x44, 0x0e, 0x1b, 0x46, 0x22, 0x1b, 0x55, 0x1b, 0x40, 0x30, 0x20, 0x20, 0x20, 0x20, 0x58, 0x1f, 0x49, 0x46, 0x0e, 0x1b, 0x55, 0x1b, 0x40, 0x54, 0x20, 0x40, 0x1b, 0x50, 0x1b, 0x45, 0x21, 0x1f, 0x4a, 0x47, 0x0e, 0x1b, 0x45, 0x22, 0x1f, 0x44, 0x4e, 0x1b, 0x46, 0x4c, 0x41, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x1f, 0x46, 0x4e, 0x1b, 0x45, 0x50, 0x6f, 0x75, 0x72, 0x20, 0x72, 0x65, 0x64, 0x6f, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x76, 0x69, 0x65, 0x20, 0x19, 0x41, 0x61, 0x20, 0x6d, 0x6f, 0x6e, 0x1f, 0x47, 0x4e, 0x1b, 0x45, 0x6d, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x6c, 0x2c, 0x20, 0x6a, 0x65, 0x20, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x20, 0x19, 0x41, 0x61, 0x1f, 0x48, 0x4e, 0x1b, 0x45, 0x6d, 0x6f, 0x6e, 0x20, 0x72, 0x19, 0x42, 0x65, 0x73, 0x65, 0x61, 0x75, 0x20, 0x77, 0x69, 0x66, 0x69, 0x20, 0x65, 0x74, 0x20, 0x6a, 0x65, 0x20, 0x6c, 0x75, 0x69, 0x1f, 0x49, 0x4e, 0x1b, 0x45, 0x64, 0x6f, 0x6e, 0x6e, 0x65, 0x20, 0x75, 0x6e, 0x20, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x1f, 0x4b, 0x41, 0x1b, 0x45, 0x1b, 0x5d, 0x18, 0x20, 0x12, 0x4c, 0x4d, 0x4f, 0x4e, 0x20, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x1f, 0x4c, 0x41, 0x1b, 0x46, 0x20, 0x12, 0x45, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x3a, 0x2e, 0x12, 0x5a, 0x1f, 0x4e, 0x41, 0x1b, 0x45, 0x1b, 0x5d, 0x18, 0x20, 0x12, 0x4c, 0x4d, 0x4f, 0x4e, 0x20, 0x52, 0x45, 0x53, 0x45, 0x41, 0x55, 0x1f, 0x4f, 0x41, 0x1b, 0x46, 0x20, 0x4e, 0x6f, 0x6d, 0x20, 0x64, 0x75, 0x20, 0x77, 0x69, 0x66, 0x69, 0x3a, 0x2e, 0x12, 0x5a, 0x4d, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x3a, 0x2e, 0x12, 0x5a, 0x1f, 0x52, 0x41, 0x1b, 0x54, 0x20, 0x18, 0x0a, 0x1b, 0x54, 0x08, 0x1b, 0x54, 0x20, 0x18, 0x0a, 0x08, 0x1b, 0x54, 0x20, 0x18, 0x1f, 0x55, 0x41, 0x1b, 0x44, 0x60, 0x12, 0x67, 0x1f, 0x56, 0x4e, 0x1b, 0x45, 0x4c, 0x69, 0x67, 0x6e, 0x65, 0x20, 0x73, 0x75, 0x69, 0x76, 0x61, 0x6e, 0x74, 0x65, 0x20, 0x12, 0x43, 0x19, 0x2e, 0x20, 0x1b, 0x5d, 0x20, 0x53, 0x55, 0x49, 0x54, 0x45, 0x20, 0x1f, 0x57, 0x4e, 0x1b, 0x44, 0x60, 0x12, 0x5a, 0x1f, 0x58, 0x4e, 0x1b, 0x45, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x19, 0x2e, 0x20, 0x1b, 0x47, 0x1b, 0x5d, 0x20, 0x45, 0x4e, 0x56, 0x4f, 0x49, 0x20, 0x1f, 0x4c, 0x4e";
  //String mire = "0x0c, 0x14, 0x1f, 0x42, 0x41, 0x0e, 0x1b, 0x5a, 0x31, 0x0b, 0x08, 0x60, 0x26, 0x23, 0x23, 0x6d, 0x30, 0x0a, 0x0a, 0x08, 0x60, 0x0a, 0x08, 0x38, 0x08, 0x08, 0x0a, 0x26, 0x08, 0x08, 0x2c, 0x08, 0x08, 0x2c, 0x08, 0x08, 0x2b, 0x0b, 0x08, 0x30, 0x08, 0x08, 0x61, 0x31, 0x21, 0x21, 0x0b, 0x08, 0x08, 0x08, 0x08, 0x60, 0x66, 0x12, 0x42, 0x26, 0x0b, 0x08, 0x08, 0x08, 0x38, 0x12, 0x43, 0x1f, 0x41, 0x4a, 0x0e, 0x1b, 0x54, 0x18, 0x0a, 0x18, 0x0a, 0x18, 0x0a, 0x18, 0x1f, 0x42, 0x4b, 0x0e, 0x1b, 0x54, 0x20, 0x12, 0x42, 0x30, 0x20, 0x20, 0x30, 0x20, 0x12, 0x42, 0x30, 0x30, 0x1f, 0x43, 0x4b, 0x0e, 0x1b, 0x57, 0x1b, 0x44, 0x48, 0x48, 0x1b, 0x54, 0x1b, 0x47, 0x34, 0x34, 0x1b, 0x57, 0x1b, 0x44, 0x48, 0x1b, 0x54, 0x1b, 0x47, 0x34, 0x34, 0x1b, 0x57, 0x1b, 0x44, 0x48, 0x48, 0x1b, 0x54, 0x1b, 0x47, 0x34, 0x34, 0x1b, 0x57, 0x1b, 0x44, 0x48, 0x1f, 0x44, 0x4b, 0x0e, 0x1b, 0x54, 0x25, 0x12, 0x4a, 0x29, 0x1f, 0x45, 0x4b, 0x0e, 0x1b, 0x44, 0x23, 0x12, 0x4b, 0x1f, 0x45, 0x4a, 0x1b, 0x44, 0x60, 0x12, 0x5e, 0x1f, 0x44, 0x60, 0x1b, 0x4f, 0x1b, 0x44, 0x1b, 0x5d, 0x33, 0x36, 0x31, 0x35, 0x1f, 0x44, 0x5f, 0x1b, 0x44, 0x1b, 0x5d, 0x1b, 0x4d, 0x1b, 0x51, 0x20, 0x08, 0x1b, 0x55, 0x20, 0x08, 0x1b, 0x52, 0x20, 0x08, 0x1b, 0x56, 0x20, 0x08, 0x1b, 0x53, 0x20, 0x08, 0x1b, 0x57, 0x20, 0x1f, 0x46, 0x49, 0x1b, 0x44, 0x20, 0x1b, 0x5d, 0x18, 0x53, 0x69, 0x20, 0x6f, 0x6e, 0x20, 0x19, 0x42, 0x65, 0x74, 0x61, 0x69, 0x74, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x31, 0x39, 0x38, 0x33, 0x2c, 0x20, 0x12, 0x42, 0x1f, 0x47, 0x49, 0x1b, 0x5a, 0x20, 0x1b, 0x44, 0x1b, 0x5d, 0x18, 0x63, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x75, 0x73, 0x20, 0x61, 0x75, 0x72, 0x61, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x19, 0x43, 0x75, 0x74, 0x19, 0x42, 0x65, 0x20, 0x20, 0x1f, 0x48, 0x49, 0x1b, 0x41, 0x1b, 0x5a, 0x20, 0x1b, 0x5d, 0x18, 0x1f, 0x49, 0x49, 0x1b, 0x44, 0x1b, 0x5a, 0x20, 0x1b, 0x5d, 0x18, 0x30, 0x2c, 0x31, 0x32, 0x46, 0x20, 0x19, 0x41, 0x61, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x78, 0x69, 0x6f, 0x6e, 0x20, 0x1f, 0x4a, 0x49, 0x1b, 0x44, 0x1b, 0x5a, 0x20, 0x1b, 0x5d, 0x18, 0x70, 0x75, 0x69, 0x73, 0x20, 0x31, 0x2c, 0x32, 0x39, 0x46, 0x20, 0x6c, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x1f, 0x4b, 0x49, 0x1b, 0x44, 0x1b, 0x5a, 0x20, 0x1b, 0x5d, 0x64, 0x6f, 0x6e, 0x74, 0x20, 0x46, 0x2e, 0x54, 0x45, 0x4c, 0x45, 0x43, 0x4f, 0x4d, 0x20, 0x4f, 0x2c, 0x31, 0x32, 0x20, 0x19, 0x41, 0x61, 0x20, 0x4f, 0x2c, 0x35, 0x4f, 0x46, 0x2f, 0x6d, 0x69, 0x6e, 0x1b, 0x5c, 0x1b, 0x59, 0x20, 0x12, 0x47, 0x1b, 0x44, 0x1b, 0x5a, 0x20, 0x1b, 0x5d, 0x1b, 0x45, 0x18, 0x20, 0x12, 0x44, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x20, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x4e, 0x49, 0x42, 0x4c, 0x45, 0x53, 0x20, 0x1b, 0x44, 0x1f, 0x4d, 0x49, 0x1b, 0x44, 0x20, 0x1b, 0x5d, 0x18, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x69, 0x72, 0x65, 0x2c, 0x20, 0x6d, 0x19, 0x42, 0x65, 0x74, 0x19, 0x42, 0x65, 0x6f, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x19, 0x42, 0x65, 0x73, 0x2c, 0x20, 0x12, 0x42, 0x1b, 0x5c, 0x20, 0x12, 0x47, 0x1b, 0x44, 0x1b, 0x5a, 0x20, 0x1b, 0x5d, 0x18, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x2c, 0x20, 0x74, 0x61, 0x72, 0x6f, 0x74, 0x73, 0x2e, 0x12, 0x42, 0x20, 0x20, 0x74, 0x61, 0x70, 0x65, 0x7a, 0x20, 0x47, 0x55, 0x49, 0x44, 0x45, 0x1b, 0x5c, 0x1f, 0x52, 0x41, 0x1b, 0x44, 0x20, 0x12, 0x67, 0x1f, 0x4f, 0x41, 0x1b, 0x44, 0x60, 0x12, 0x67, 0x1f, 0x50, 0x41, 0x63, 0x6f, 0x64, 0x65, 0x0a, 0x0d, 0x64, 0x75, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x1f, 0x53, 0x41, 0x1b, 0x44, 0x60, 0x12, 0x67, 0x0a, 0x28, 0x43, 0x29, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x19, 0x42, 0x65, 0x0a, 0x0d, 0x32, 0x30, 0x32, 0x33, 0x1f, 0x53, 0x41, 0x1b, 0x44, 0x60, 0x12, 0x67, 0x1f, 0x54, 0x4b, 0x18, 0x0a, 0x18, 0x0a, 0x18, 0x0a, 0x18, 0x0a, 0x18, 0x0a, 0x1f, 0x53, 0x61, 0x1b, 0x5d, 0x20, 0x45, 0x6e, 0x76, 0x6f, 0x69, 0x20, 0x20, 0x1f, 0x56, 0x4b, 0x1b, 0x4d, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x49, 0x52, 0x45, 0x20, 0x44, 0x45, 0x53, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x1b, 0x5a, 0x1b, 0x47, 0x1b, 0x4d, 0x20, 0x1b, 0x5d, 0x20, 0x47, 0x75, 0x69, 0x64, 0x65, 0x20, 0x20, 0x1f, 0x57, 0x47, 0x1b, 0x47, 0x20, 0x12, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x19, 0x41, 0x65, 0x74, 0x72, 0x65, 0x73, 0x20, 0x64, 0x75, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x74, 0x1b, 0x5a, 0x1b, 0x42, 0x20, 0x1b, 0x5d, 0x53, 0x6f, 0x6d, 0x6d, 0x61, 0x69, 0x72, 0x65, 0x1f, 0x58, 0x4b, 0x1b, 0x47, 0x20, 0x12, 0x51, 0x66, 0x69, 0x6e, 0x1b, 0x5a, 0x1b, 0x42, 0x20, 0x1b, 0x5d, 0x20, 0x43, 0x78, 0x2f, 0x46, 0x69, 0x6e, 0x20, 0x1f, 0x51, 0x4c, 0x1b, 0x4c, 0x1b, 0x43, 0x2e, 0x12, 0x5c, 0x1f, 0x51, 0x4c, 0x1b, 0x4c, 0x11";
  //drawScreen(mire, 0, 0);  
  afficheConfig(vdt);
}

void loop() {
  // put your main code here, to run repeatedly:
  gereTouchesConfig();
}